import pygame as pg
import sys
from settings import *
from sprites import *
from os import path
from copy import deepcopy


class Game:
    def __init__(self):
        pg.init()
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption(TITLE)
        self.clock = pg.time.Clock()
        pg.key.set_repeat(100, 500)
        self.load_data()
        self.start = pg.time.get_ticks()

    def load_data(self):
        self.homedir = path.dirname(__file__)

    def new(self):
        # initialize all variables and do all the setup for a new game
        self.all_sprites = pg.sprite.Group()
        self.walls = pg.sprite.Group()
        self.paths = pg.sprite.Group()

        self.path_string, self.short_path_string = '', ''
        self.path_tiles = [[]]
        self.loops_count = [[]]


        self.lines00 = ['#################################################',
                 '#P.#........#..#..#..#....................#.....#',
                 '#..####..####..#..#..#..####..####..#..#..#..#..#',
                 '#....................#.....#.....#..#..#..#..#..#',
                 '####..#######..####..####..#..#############..####',
                 '#........#..#.....#..#.....#..#.................#',
                 '#..####..#..#..#######..#..##########..#..#######',
                 '#..#.....#..#...........#.....#.....#..#........#',
                 '#######..#..#..####..#..##########..####..####..#',
                 '#..#.....#........#..#..#.....#..............#..#',
                 '#..#..#..#######..####..#..#..#############..#..#',
                 '#.....#.....#........#..#..#........#.....#..#..#',
                 '#######..#..#############..#############..#..####',
                 '#..#.....#.....#....................#.....#..#..#',
                 '#..####..####..#..#..#######..####..#..#..#..#..#',
                 '#..#..#.....#.....#.....#..#..#..#..#..#..#..#..#',
                 '#..#..##########..#..#..#..####..####..####..#..#',
                 '#........#........#..#.....#..#..#..#..#........#',
                 '####..#######..####..#..#..#..#..#..#..#######..#',
                 '#.....#........#.....#..#........#..#..#........#',
                 '####..####..####..####..#######..#..#..#..####..#',
                 '#.....#..#..#.....#...........#...........#..#..#',
                 '#..####..#..#..#######..#..################..####',
                 '#...........#..#..#.....#...........#..#..#..#..#',
                 '####..#..#..####..#..#..#..#######..#..#..#..#..#',
                 '#.....#..#..#..#.....#..#..#..#..#..#.....#..#..#',
                 '#..#######..#..#..#..#..#..#..#..#######..#..#..#',
                 '#..#.....#.....#..#..#..#.....#..#.....#........#',
                 '#..####..#..##########..#######..#..#..#######..#',
                 '#..#..#........#.....#........#.....#...........#',
                 '#..#..#..#..#..####..####..#######..#..####..#..#',
                 '#..#.....#..#...........#...........#.....#..#..#',
                 '###############################################E#']
        self.lines = [
                 '#################################',
                 '#.#...#.....#.....#.......#.....#',
                 '#.#.#.###.###.###.###.#####.#####',
                 '#...#.#.#.#...#.....#.#.........#',
                 '#.#.#.#.#.###.#####.#.#.#####.#.#',
                 '#.#.#...#.#.....#.........#...#.#',
                 '#.#######.###.#####.#.#.#######.#',
                 '#...........#.....#.#.#...#.....#',
                 '#.#.#.#######.###.#######.###.###',
                 '#.#.#...#.#.#...#.#.....#.#.....#',
                 '#####.###.#.#.#.#.###.#.#.#######',
                 '#....P......#.#.#.#...#...#.#...#',
                 '#.###.#.#.###########.#.###.###.#',
                 '#...#.#.#.#.....#...#.#...#...#.#',
                 '###.#######.###.#.#####.###.#.#.#',
                 '#...#.........#.....#...#.#.#...#',
                 '#.###.###.#.#.#########.#.###.#.#',
                 '#.#.....#.#.#.............#...#.#',
                 '#.#######.###.#######.#######.###',
                 '#.....#...#...#.......#.......#.#',
                 '###.#.#.###########.#######.#.#.#',
                 '#...#...#.....#.............#.#.#',
                 '###.#.#.###.#####.#####.#.#####.#',
                 '#...#.#.#.....#.......#.#.......#',
                 '#.#########.#######.#######.#####',
                 '#...#.....#.#.......#.....#.#...#',
                 '#.###.###.#.#####.#.#####.#.###.#',
                 '#...#...#.......#.#...#...#.#.#.#',
                 '###.#######.#########.#.#####.#.#',
                 '#.#.#.......#.......#.......#...#',
                 '#.#.###.#####.###.#.#.#####.#.#.#',
                 '#.........#.....#.#...#.......#E#',
                 '#################################']
        self.lines01 = [
                '#################################################################################################',
                '#.#.#.#...#.......#...#.#.....#.#.#.#.#.....#...#.............#.................#...#.#.......#.#',
                '#.#.#.###.#.###.###.###.#.#.#.#.#.#.#.###.#####.#.#.###.#.###.#.#.#.#.#####.###.#.###.###.#####.#',
                '#.#.....#.#...#.....#.#.#.#.#.#.#...#...#...#.#...#...#.#.#...#.#.#.#...#...#...#.#.#.......#...#',
                '#.###.###.#.#######.#.#.#.#.###.#.#.#.#####.#.#.#.###.#.###.###.#.###.###.#######.#.###.#######.#',
                '#...#.....#.....#.#.......#.......#.........#...#.#.#.#.#.#.....#...#...#.#.#...#...#.#.....#.#.#',
                '#.#.#.#.###.#.#.#.#####.#.#.###############.#.#.###.#.###.###.###.#######.#.#.#.#.###.###.###.#.#',
                '#.#.#.#.#.#.#.#.#...#...#.#.........#.#.#...#.#.#.#.....#.......#...#.#.#.....#.#.#...#.........#',
                '###.#.###.#####.###.#####.#.###.#####.#.#######.#.###.#############.#.#.###.#####.###.#####.###.#',
                '#...#...#.......#.#.......#...#...#.#.........#.#.......#.......#...#.......#.#.#.....#.....#...#',
                '###.###.###.#####.#####.#.#.#.###.#.#.#.#.#.#####.#############.#########.###.#.#.#.#.#.#######.#',
                '#.....#...........#.#...#.#.#.#.....#.#.#.#.#.........................#.....#...#.#.#.#...#.....#',
                '#.#######.#.#####.#.#######.#.#.###.#######.#####.#####.#.#########.#####.#.#.#######.#.#.#######',
                '#...#.#...#.#.....#.......#.#.#.#.#.....#...#...#...#...#.#.........#.#...#...#.#.....#.#.....#.#',
                '#.###.###.#########.#.###.#####.#.###.#.###.###.#.#.#####.#####.#.###.#######.#.###.#######.#.#.#',
                '#...#...#.......#...#...#.#...#.#.#...#.#...#.....#...#...#.....#.....#.#...#.........#.....#...#',
                '#.#.#.###.#.###.#####.#####.#.###.###.#####.###.#.#.#.###.#.#########.#.#.###.#####.###########.#',
                '#.#.....#.#...#.#.#.........#...#.#...........#.#.#.#.#.#.#.#.#...#.#.......#.#...#...........#.#',
                '#.#######.###.#.#.#.#########.###.###.#.#####.###.###.#.###.#.#.###.#####.###.#.###.#########.#.#',
                '#.#.#...#.#...#.#...#.......#.#.......#.#.#.......#...#.#...#.....#.#...#.#.....#.#.......#.#...#',
                '#.#.#.#########.###.#######.#.###########.#####.###.###.#.#.#.#####.#.#######.###.#.#.###.#.#####',
                '#.#.#.#...#.#.#.#.#.....#.#.#.........#.#.#.....#.....#...#.#.............#.......#.#...#.#.....#',
                '#.#.#.###.#.#.###.#.###.#.#.#.#######.#.#.#.#.#.###.#.###.###.###.#.###.#####.#.#######.#####.###',
                '#.......#.#...#.....#.......#.......#.#.....#.#.#.#.#.#.........#.#.#...#.....#...#.............#',
                '#####.#.#.#.#.#.###.#######.#.#.###.#.#.###.#####.#.###########.#.#.###.###.###.#.#####.###.###.#',
                '#.....#.....#...#...#.#.#...#.#...#.#.#...#...#.#...#...#...#...#.#.#...#...#...#.#.#...#.....#.#',
                '###########.#########.#.#.#####.###.#####.#.###.###.#.#.#.#.#.#########.###.#######.###.#.#######',
                '#.......#.#...#.#.......#.....#.#.......#.#...#...#.#.#.#.#...........#...#.#.#.........#...#...#',
                '###.###.#.#.#.#.#####.#.#.###.#####.#####.#.#####.###.#####.###.###.#.#.#####.#.#.#.#.#.###.#.###',
                '#.#...#.#...#.#...#...#...#.....#.....#...#.#.#.....#.........#.#...#.#...#.....#.#.#.#...#.....#',
                '#.#.#########.#.#.#####.###.#.#####.#.#######.#.#.#####.###.#.#######.#####.#####.#####.#####.###',
                '#.#.#.......#...#...#.#.#.#.#.#.....#.#.#.#.....#...#...#...#...#.........#.#...#...#...#...#...#',
                '#.#.###.#####.#.#####.#.#.#######.#####.#.#####.#####.#.#.###########.#######.###########.#####.#',
                '#...#.........#.#.#.#...#.#.#.....#...#...#.......#...#.#.....#...#.....#.....#.#...#.........#.#',
                '#.#.###.#######.#.#.#####.#.###.###.###.#########.###.###.#.#####.#.###.#####.#.#.###.###.###.#.#',
                '#.#.....#.....#.#.#.....#...#.......#.#.#.....#.#...#...#.#...#.#.#...#...#.#.#...#.....#.#.#.#.#',
                '#.###.#.#.#.#.###.#.#.###.#.#####.###.#.###.###.#.#.#.#########.#.#.#.#.###.#.#.#.#.###.#.#.#####',
                '#.#.#.#.#.#.#.......#.#.#.#.#.#.#.#.....#...#.#...#.....#.....#.....#.#.#.......#.#...#.#.#.....#',
                '###.#.#.#######.#.#.###.###.#.#.#.#####.#.###.#######.#.###.#.#.#######.#.###.#######.#.###.#####',
                '#.....#.....#...#.#.....#.#...#.......#.....#.#.#.#...#.#.#.#.#...#...#.#...#...#...#.#.....#.#.#',
                '#.#####.#####.###.#######.#.###.#.###.#.#####.#.#.#.#.###.###.#######.#####.###.#.###.###.###.#.#',
                '#.....#.#.#...#.........#.#...#.#.#...#.....#.....#.#.....#.#...#.#.....#.....#.....#.#.....#...#',
                '#.#####.#.#.#########.#.#.#.#####.###.#.#####.###.###.#.#.#.#.###.#.###.###.###.#######.#.###.#.#',
                '#.....#.#.....#.#...#.#...#.#.......#.#.#.#.....#.....#.#...#...#.#...#.....#.#...#.....#.....#.#',
                '###.#.###.###.#.###.#####.#.###########.#.#.###########.#######.#.###########.#.#.#.#######.#.###',
                '#...#.....#...#.#.#.#.#.....#.....#...#.....#.#...#.........#.............#.#.#.#.#.....#.#.#...#',
                '#.###.#####.#.#.#.#.#.#####.#.#####.#####.###.#.###.#.#####.#.#####.#######.#.#.###.#.#.#.#.#.#.#',
                '#...#.#.....#.#.........#.#.......#...#...#.........#...#.....#...#...#.#...........#.#...#.#.#.#',
                '#.#################.###.#.#.#######.###############.#.#######.###.#.###.#######.#####.###.#######',
                '#.....#...#.#.....#...#.#...#...#.......#.....#...#.#.......#.#.#.#...#.......#...#...#.#.#...#.#',
                '###.#####.#.#####.###.#.#######.###.#.#####.###.#####.#.###.#.#.#.#.#####.###.#####.###.#####.#.#',
                '#...#...#.............#.........#.#.#.....#.......#.#.#.#.#.#...#...#.#.....#.#.........#.......#',
                '###.#.###.###.#.#.#.#.###.###.###.#.#.#####.#####.#.###.#.#.#.#####.#.#.###########.###.#.#######',
                '#...#.......#.#.#.#.#.#.#...#.#.#...#.......#.#...#...#.#...#...#...#.........#.#.....#.....#...#',
                '#.#.###.#.#####.#####.#.#.###.#.#.#####.#####.#.#####.#.#.#######.#####.#.###.#.###.#.#########.#',
                '#.#...#.#.#.....#...#...#.#.......#.......#.........#...#.#.........#...#.#.....#...#.......#.#.#',
                '#.#####.###.#.###.#.###.#######.###.#####.###.#.###.#.#######.###.#####.###.#.#.#.###########.#.#',
                '#.........#.#.#.#.#.....#...#.....#.#.....#.#.#...#.........#...#.#.#.#.#...#.#.#.....#.....#...#',
                '#.#.###.###.#.#.#########.###.#.#.###.###.#.#.###.###########.###.#.#.#######.###.###.#####.#.###',
                '#.#.#.....#.#.#.#...#.....#...#.#...#.#.....#...#.#.....#...#.#.......#.......#.#...#.....#.#.#.#',
                '#.#.#.#.#######.#.#.#E#####.#.###.#####.###########.#.###.###.###.###.#.#.#####.#.#########.#.#.#',
                '#.#.#.#...#.#...#.#.......#.#.#.....#...#...#...#...#.......#.#.#.#...#.#.....#...#.....#...#...#',
                '#.###.#.###.#.#.#.#.###.#.#.#.#.#####.#####.#.#.#.#.#.#.#####.#.#.###.#.#####.###.###.#.#.#.###.#',
                '#.#...#.#...#.#...#.#.#.#...#.#...#.#.#...#...#...#.#.#.#.....#.#.#...#.#.#.#.........#.#.#...#.#',
                '###.#####.#####.#####.#.#####.#####.#####.###.#####.###########.#.#####.#.#.#######.###.#.#.###.#',
                '#.........#...#.#...#.....#.#.#.#...#...#.#.......#.......#...#.......#.....#.#...#.#...#.#.#...#',
                '###.#####.#.###.#.###.#####.#.#.###.###.#.#####.###.###.###.###.#####.#######.#.#.#.#####.#####.#',
                '#.....#...#.#.....#...#.#.#.#...#...#.#...#.#.#...#...#.#...#.....#...#...#.....#...#.....#.#...#',
                '###########.###.###.#.#.#.#.###.#.###.###.#.#.###.#.#######.#########.###.#######.###.#.###.#.#.#',
                '#.....#.....#.#.#...#.....#...#...#.#...........#.#...#.......#.........#.#.#...#...#.#.#.....#.#',
                '#.###.#####.#.#######.#####.#####.#.#.#.#####.#####.###.###.#####.#####.#.#.###.###.###.###.#.###',
                '#...#.....#.....#.#.....#...#...#.....#.#...#...#...#...#.....#.#.#.#...#.......#...#.......#...#',
                '#######.#.#.#.#.#.#.#.###.#####.#.###.###.###.###.###.#######.#.###.###########.###.#######.#####',
                '#.......#.#.#.#.#.#.#.#.........#...#.#.....#...............#...#.......#.#.#.........#...#.....#',
                '#####.#########.#.###.#.###.#.###.#####.#.#.#####.#######.###.###.#.#.###.#.#.#.###.###.#.#.#.###',
                '#.......#.#.....#...#.#.#...#.........#.#.#...........#.#.#.#.#...#.#.........#.#.#.#...#...#...#',
                '#.###.#.#.#.#.#####.#.#.#######.###.#.#.###.#######.###.###.###.###.#########.###.#.#.#######.###',
                '#.#.#.#...#.#.#.......#.#.........#.#.#.#...#.#...#.#.#.#.#...#...#.#.#.....#...#.#.#.#.#.#.....#',
                '#.#.#####.#.#####.#.###.#.#.#.#.###.#######.#.#.#####.#.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#.#',
                '#.#.......#.#.....#...#.#.#.#.#.#...#...#.#.#.....#...................#.#.#.#.#.#.......#...#.#.#',
                '###.#######.#.#.#####.#######.###.###.###.#.#####.#.#######.#####.#####.#.#####.#########.###.###',
                '#...#...#...#.#...#...#...#.....#.#...............#...#.#.....#.#...#.....#.......#...#.....#.#.#',
                '###.#.#.#.#.#######.#.#.###.###.###########.###.#####.#.#.#.#.#.#####.#.#.#######.#.#.#####.###.#',
                '#.....#...#.......#.#.#.#...#.#.....#.......#...#.....#...#.#.....#...#.#...#.#.....#...#...#...#',
                '#####.###.###.###.#.###.#####.#######.###.#####.#.###.#####.#.#.#.#########.#.#######.#.#####.#.#',
                '#.#...#.#...#.#.#...#...#...#.#.......#.#.#.......#.#.#.....#.#.#...#...#...#...#.#...#.......#.#',
                '#.#.#.#.###.###.#.#.###.#.###.#.#####.#.#.#.#.#.###.#.###.#.###.#######.###.###.#.#.#.#####.#####',
                '#...#.....#.#...#.#.#.....#.....#...#...#.#.#.#...#...#...#.#.#.#.#...#.#.........#.#.....#...#.#',
                '#.#####.###.#.#.###.###.###.#.#####.#.#############.###.#####.###.#.#.#.#.###.#.#.#.#.#######.#.#',
                '#...#...#.....#.#...#.......#...#...#.......#.#.....#.#...#...#.....#...#...#.#.#.#.#.#.......#.#',
                '###########.#.#####.#.###.#########.#.#.#####.#######.###.#.###.#######.###.#.#######.#.#.#.#.#.#',
                '#...........#.#.#...#...#...#.#.....#.#.#.......#.#...#.........#.......#...#.....#...#.#.#.#.#.#',
                '###.#######.###.###.###.#####.###.#####.#####.#.#.#.###.###.###########.#.###.###.###.#####.###.#',
                '#.#.....#...#...#.#.#...#...#.#.#...#.....#.#.#...#.#...#.#.#....P#.#.#...#.....#.#.#.#...#.....#',
                '#.#.#####.###.###.#####.#.###.#.#.#.#.###.#.#####.#.###.#.#.###.#.#.#.###.#.#.#####.#.#.###.#.#.#',
                '#.....#.............#.........#...#...#.....#.............#.#...#.........#.#.......#...#...#.#.#',
                '#################################################################################################'
                ]
        self.lines02 = [
            '#######',
            '#.#P#.#',
            '###.###',
            '#E....#',
            '#######',
            '#######',
            '#######'
        ]
        self.lines03 = [
                    '#########',
                    '#P..#...#',
                    '#.###.###',
                    '#...#...#',
                    '#.#.#.###',
                    '#.#.....#',
                    '#.#####.#',
                    '#.....#E#',
                    '#########'
                    ]

        for j in range(len(self.lines)):
            self.path_tiles.append([])
            for i in range(len(self.lines[0])):
                self.path_tiles[j].append(False)

        for j in range(len(self.lines)):
            self.loops_count.append([])
            for i in range(len(self.lines[0])):
                if self.lines[j][i] == '#':
                    self.loops_count[j].append(-1)
                else:
                    ways = 0
                    if self.lines[j - 1][i] != '#':
                        ways += 1
                    if self.lines[j + 1][i] != '#':
                        ways += 1
                    if self.lines[j][i - 1] != '#':
                        ways += 1
                    if self.lines[j][i + 1] != '#':
                        ways += 1
                    self.loops_count[j].append(ways)

        for line in self.loops_count:
            print(line)

        for idy, line in enumerate(self.lines):
            for idx, tile in enumerate(line):
                if tile == '#':
                    Wall(self, idx, idy)
                elif tile == 'P':
                    self.player = Player(self, idx, idy)
                    self.startpoint = vec(idx, idy)
                elif tile == 'E':
                    self.exit = Exit(self, idx, idy)

        self.path_tiles[int(self.player.pos.y)][int(self.player.pos.x)] = True
        self.export_maze(path.join(self.homedir, 'maze.jpg'))

        # self.screen.blit(pg.image.load(path.join(self.homedir, 'maze.jpg')), vec(0, 0))
        # pg.display.update()

    def run(self):
        # game loop - set self.playing = False to end the game
        self.playing = True
        while self.playing:
            self.dt = self.clock.tick(FPS) / 1000
            self.events()
            self.update()
            self.draw()

    def quit(self):
        pg.quit()
        sys.exit()

    def update(self):
        # update portion of the game loop
        self.all_sprites.update()
        if self.player.pos == self.exit.pos:
            self.playing = False

    def draw_grid(self):
        for x in range(0, WIDTH, TILESIZE):
            pg.draw.line(self.screen, LIGHTGREY, (x, 0), (x, HEIGHT))
        for y in range(0, HEIGHT, TILESIZE):
            pg.draw.line(self.screen, LIGHTGREY, (0, y), (WIDTH, y))

    def draw(self):
        self.screen.fill(BGCOLOR)
        # self.draw_grid()
        self.all_sprites.draw(self.screen)
        self.screen.blit(self.player.image, (self.player.rect.x, self.player.rect.y))
        self.screen.blit(self.exit.image, (self.exit.rect.x, self.exit.rect.y))
        pg.display.set_caption('{:02f}'.format(self.clock.get_fps()))
        pg.display.update()
        pass

    def events(self):
        # catch all events here
        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.quit()

    def show_go_screen(self):
        timelapse = pg.time.get_ticks() - self.start
        self.path_tiles[int(self.exit.pos.y)][int(self.exit.pos.x)] = True
        # print(str(timelapse) + 'm')
        print(str(timelapse / 1000) + 's')
        # print(str(timelapse / 1000 / 60) + 'min')
        # print('Traveled: ' + self.path_string)
        self.export_path(path.join(self.homedir, 'path.jpg'))
        print('Path exported')

        self.screen.blit(pg.image.load(path.join(self.homedir, 'path.jpg')), vec(0, 0))
        pg.display.update()
        while True:
            self.events()

    def export_maze(self, path):
        img = pg.Surface((WIDTH, HEIGHT))
        for wall in self.walls:
            img.blit(wall.image, (wall.pos.x * TILESIZE, wall.pos.y * TILESIZE))
        pg.image.save(img, path)

    def return_maze(self):
        img = pg.Surface((WIDTH, HEIGHT))
        for wall in self.walls:
            img.blit(wall.image, (wall.pos.x * TILESIZE, wall.pos.y * TILESIZE))
        return img

    def export_path(self, path):
        self.find_bad_paths()
        img = self.return_maze()
        for idl, line in enumerate(self.path_tiles):
            for idt, tile in enumerate(line):
                if tile:
                    square = pg.Surface((TILESIZE, TILESIZE))
                    square.fill(BLUE)
                    img.blit(square, (idt * TILESIZE, idl * TILESIZE))
        pg.image.save(img, path)

    def find_bad_paths(self):
        tiles = deepcopy(self.path_tiles)
        for idl, line in enumerate(self.path_tiles):
            for idt, tile in enumerate(line):
                if tile:
                    ways = 0
                    if self.path_tiles[idl - 1][idt]:
                        ways += 1
                    if self.path_tiles[idl + 1][idt]:
                        ways += 1
                    if self.path_tiles[idl][idt - 1]:
                        ways += 1
                    if self.path_tiles[idl][idt + 1]:
                        ways += 1

                    if idl == self.exit.pos.y and idt == self.exit.pos.x or \
                            idl == self.startpoint.y and idt == self.startpoint.x:
                        ways += 1

                    if ways < 2:
                        tiles[idl][idt] = False

        # with open(path.join(self.homedir, 'old_path.txt'), 'w') as f:
        #     for line in self.path_tiles:
        #         f.write('[')
        #         for tile in line:
        #             tilev = '.'
        #             if tile:
        #                 tilev = '#'
        #             f.write('[' + str(tilev) + '],')
        #         f.write(']\n')

        self.path_tiles = tiles
        # with open(path.join(self.homedir, 'new_path.txt'), 'w') as f:
        #     for line in self.path_tiles:
        #         f.write('[')
        #         for tile in line:
        #             tilev = '.'
        #             if tile:
        #                 tilev = '#'
        #             f.write('[' + str(tilev) + '],')
        #         f.write(']\n')


# create the game object
g = Game()

g.new()
g.run()
g.show_go_screen()
